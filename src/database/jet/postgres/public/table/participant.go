//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Participant = newParticipantTable("public", "participant", "")

type participantTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	Email        postgres.ColumnString
	Address      postgres.ColumnString
	Organizer    postgres.ColumnBool
	Participates postgres.ColumnBool
	Accepted     postgres.ColumnBool
	EventID      postgres.ColumnInteger
	UserID       postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ParticipantTable struct {
	participantTable

	EXCLUDED participantTable
}

// AS creates new ParticipantTable with assigned alias
func (a ParticipantTable) AS(alias string) *ParticipantTable {
	return newParticipantTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ParticipantTable with assigned schema name
func (a ParticipantTable) FromSchema(schemaName string) *ParticipantTable {
	return newParticipantTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ParticipantTable with assigned table prefix
func (a ParticipantTable) WithPrefix(prefix string) *ParticipantTable {
	return newParticipantTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ParticipantTable with assigned table suffix
func (a ParticipantTable) WithSuffix(suffix string) *ParticipantTable {
	return newParticipantTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newParticipantTable(schemaName, tableName, alias string) *ParticipantTable {
	return &ParticipantTable{
		participantTable: newParticipantTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newParticipantTableImpl("", "excluded", ""),
	}
}

func newParticipantTableImpl(schemaName, tableName, alias string) participantTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		EmailColumn        = postgres.StringColumn("email")
		AddressColumn      = postgres.StringColumn("address")
		OrganizerColumn    = postgres.BoolColumn("organizer")
		ParticipatesColumn = postgres.BoolColumn("participates")
		AcceptedColumn     = postgres.BoolColumn("accepted")
		EventIDColumn      = postgres.IntegerColumn("event_id")
		UserIDColumn       = postgres.IntegerColumn("user_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, EmailColumn, AddressColumn, OrganizerColumn, ParticipatesColumn, AcceptedColumn, EventIDColumn, UserIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns     = postgres.ColumnList{NameColumn, EmailColumn, AddressColumn, OrganizerColumn, ParticipatesColumn, AcceptedColumn, EventIDColumn, UserIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return participantTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Email:        EmailColumn,
		Address:      AddressColumn,
		Organizer:    OrganizerColumn,
		Participates: ParticipatesColumn,
		Accepted:     AcceptedColumn,
		EventID:      EventIDColumn,
		UserID:       UserIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
