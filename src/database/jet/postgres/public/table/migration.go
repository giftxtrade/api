//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Migration = newMigrationTable("public", "migration", "")

type migrationTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	Name          postgres.ColumnString
	MigrationDate postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MigrationTable struct {
	migrationTable

	EXCLUDED migrationTable
}

// AS creates new MigrationTable with assigned alias
func (a MigrationTable) AS(alias string) *MigrationTable {
	return newMigrationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MigrationTable with assigned schema name
func (a MigrationTable) FromSchema(schemaName string) *MigrationTable {
	return newMigrationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MigrationTable with assigned table prefix
func (a MigrationTable) WithPrefix(prefix string) *MigrationTable {
	return newMigrationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MigrationTable with assigned table suffix
func (a MigrationTable) WithSuffix(suffix string) *MigrationTable {
	return newMigrationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMigrationTable(schemaName, tableName, alias string) *MigrationTable {
	return &MigrationTable{
		migrationTable: newMigrationTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newMigrationTableImpl("", "excluded", ""),
	}
}

func newMigrationTableImpl(schemaName, tableName, alias string) migrationTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		NameColumn          = postgres.StringColumn("name")
		MigrationDateColumn = postgres.TimestampColumn("migration_date")
		allColumns          = postgres.ColumnList{IDColumn, NameColumn, MigrationDateColumn}
		mutableColumns      = postgres.ColumnList{IDColumn, NameColumn, MigrationDateColumn}
	)

	return migrationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Name:          NameColumn,
		MigrationDate: MigrationDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
