//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Draw = newDrawTable("public", "draw", "")

type drawTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	DrawerID  postgres.ColumnInteger
	DraweeID  postgres.ColumnInteger
	EventID   postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DrawTable struct {
	drawTable

	EXCLUDED drawTable
}

// AS creates new DrawTable with assigned alias
func (a DrawTable) AS(alias string) *DrawTable {
	return newDrawTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DrawTable with assigned schema name
func (a DrawTable) FromSchema(schemaName string) *DrawTable {
	return newDrawTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DrawTable with assigned table prefix
func (a DrawTable) WithPrefix(prefix string) *DrawTable {
	return newDrawTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DrawTable with assigned table suffix
func (a DrawTable) WithSuffix(suffix string) *DrawTable {
	return newDrawTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDrawTable(schemaName, tableName, alias string) *DrawTable {
	return &DrawTable{
		drawTable: newDrawTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newDrawTableImpl("", "excluded", ""),
	}
}

func newDrawTableImpl(schemaName, tableName, alias string) drawTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		DrawerIDColumn  = postgres.IntegerColumn("drawer_id")
		DraweeIDColumn  = postgres.IntegerColumn("drawee_id")
		EventIDColumn   = postgres.IntegerColumn("event_id")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, DrawerIDColumn, DraweeIDColumn, EventIDColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{DrawerIDColumn, DraweeIDColumn, EventIDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return drawTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		DrawerID:  DrawerIDColumn,
		DraweeID:  DraweeIDColumn,
		EventID:   EventIDColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
