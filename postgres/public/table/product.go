//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Product = newProductTable("public", "product", "")

type productTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	ProductKey   postgres.ColumnString
	ImageURL     postgres.ColumnString
	TotalReviews postgres.ColumnInteger
	Rating       postgres.ColumnFloat
	Price        postgres.ColumnString
	Currency     postgres.ColumnString
	URL          postgres.ColumnString
	CategoryID   postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	ProductTs    postgres.ColumnString
	Origin       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductTable struct {
	productTable

	EXCLUDED productTable
}

// AS creates new ProductTable with assigned alias
func (a ProductTable) AS(alias string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductTable with assigned schema name
func (a ProductTable) FromSchema(schemaName string) *ProductTable {
	return newProductTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductTable with assigned table prefix
func (a ProductTable) WithPrefix(prefix string) *ProductTable {
	return newProductTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductTable with assigned table suffix
func (a ProductTable) WithSuffix(suffix string) *ProductTable {
	return newProductTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductTable(schemaName, tableName, alias string) *ProductTable {
	return &ProductTable{
		productTable: newProductTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newProductTableImpl("", "excluded", ""),
	}
}

func newProductTableImpl(schemaName, tableName, alias string) productTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		ProductKeyColumn   = postgres.StringColumn("product_key")
		ImageURLColumn     = postgres.StringColumn("image_url")
		TotalReviewsColumn = postgres.IntegerColumn("total_reviews")
		RatingColumn       = postgres.FloatColumn("rating")
		PriceColumn        = postgres.StringColumn("price")
		CurrencyColumn     = postgres.StringColumn("currency")
		URLColumn          = postgres.StringColumn("url")
		CategoryIDColumn   = postgres.IntegerColumn("category_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		ProductTsColumn    = postgres.StringColumn("product_ts")
		OriginColumn       = postgres.StringColumn("origin")
		allColumns         = postgres.ColumnList{IDColumn, TitleColumn, DescriptionColumn, ProductKeyColumn, ImageURLColumn, TotalReviewsColumn, RatingColumn, PriceColumn, CurrencyColumn, URLColumn, CategoryIDColumn, CreatedAtColumn, UpdatedAtColumn, ProductTsColumn, OriginColumn}
		mutableColumns     = postgres.ColumnList{TitleColumn, DescriptionColumn, ProductKeyColumn, ImageURLColumn, TotalReviewsColumn, RatingColumn, PriceColumn, CurrencyColumn, URLColumn, CategoryIDColumn, CreatedAtColumn, UpdatedAtColumn, OriginColumn}
	)

	return productTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		ProductKey:   ProductKeyColumn,
		ImageURL:     ImageURLColumn,
		TotalReviews: TotalReviewsColumn,
		Rating:       RatingColumn,
		Price:        PriceColumn,
		Currency:     CurrencyColumn,
		URL:          URLColumn,
		CategoryID:   CategoryIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		ProductTs:    ProductTsColumn,
		Origin:       OriginColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
