// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: participant.sql

package database

import (
	"context"
	"database/sql"
)

const acceptEventInvite = `-- name: AcceptEventInvite :one
UPDATE "participant"
SET
    "accepted" = TRUE,
    "user_id" = $1,
    "updated_at" = now()
WHERE 
    "email" = $2
        AND
    "event_id" = $3
RETURNING id, name, email, address, organizer, participates, accepted, event_id, user_id, created_at, updated_at
`

type AcceptEventInviteParams struct {
	UserID  sql.NullInt64 `db:"user_id" json:"userId"`
	Email   string        `db:"email" json:"email"`
	EventID int64         `db:"event_id" json:"eventId"`
}

func (q *Queries) AcceptEventInvite(ctx context.Context, arg AcceptEventInviteParams) (Participant, error) {
	row := q.queryRow(ctx, q.acceptEventInviteStmt, acceptEventInvite, arg.UserID, arg.Email, arg.EventID)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Organizer,
		&i.Participates,
		&i.Accepted,
		&i.EventID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createParticipant = `-- name: CreateParticipant :one
INSERT INTO "participant" (
    "name",
    "email",
    "address",
    "organizer",
    "participates",
    "accepted",
    "event_id",
    "user_id"
) VALUES (
    $1, $2, $7, $3, $4, $5, $6, $8
)
RETURNING id, name, email, address, organizer, participates, accepted, event_id, user_id, created_at, updated_at
`

type CreateParticipantParams struct {
	Name         string         `db:"name" json:"name"`
	Email        string         `db:"email" json:"email"`
	Organizer    bool           `db:"organizer" json:"organizer"`
	Participates bool           `db:"participates" json:"participates"`
	Accepted     bool           `db:"accepted" json:"accepted"`
	EventID      int64          `db:"event_id" json:"eventId"`
	Address      sql.NullString `db:"address" json:"address"`
	UserID       sql.NullInt64  `db:"user_id" json:"userId"`
}

func (q *Queries) CreateParticipant(ctx context.Context, arg CreateParticipantParams) (Participant, error) {
	row := q.queryRow(ctx, q.createParticipantStmt, createParticipant,
		arg.Name,
		arg.Email,
		arg.Organizer,
		arg.Participates,
		arg.Accepted,
		arg.EventID,
		arg.Address,
		arg.UserID,
	)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Organizer,
		&i.Participates,
		&i.Accepted,
		&i.EventID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const declineEventInvite = `-- name: DeclineEventInvite :one
DELETE FROM "participant"
WHERE "email" = $1 AND "event_id" = $2
RETURNING id, name, email, address, organizer, participates, accepted, event_id, user_id, created_at, updated_at
`

type DeclineEventInviteParams struct {
	Email   string `db:"email" json:"email"`
	EventID int64  `db:"event_id" json:"eventId"`
}

func (q *Queries) DeclineEventInvite(ctx context.Context, arg DeclineEventInviteParams) (Participant, error) {
	row := q.queryRow(ctx, q.declineEventInviteStmt, declineEventInvite, arg.Email, arg.EventID)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Organizer,
		&i.Participates,
		&i.Accepted,
		&i.EventID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findParticipantFromEventIdAndUser = `-- name: FindParticipantFromEventIdAndUser :one
SELECT id, name, email, address, organizer, participates, accepted, event_id, user_id, created_at, updated_at FROM "participant"
WHERE "event_id" = $1 AND "user_id" = $2
`

type FindParticipantFromEventIdAndUserParams struct {
	EventID int64         `db:"event_id" json:"eventId"`
	UserID  sql.NullInt64 `db:"user_id" json:"userId"`
}

func (q *Queries) FindParticipantFromEventIdAndUser(ctx context.Context, arg FindParticipantFromEventIdAndUserParams) (Participant, error) {
	row := q.queryRow(ctx, q.findParticipantFromEventIdAndUserStmt, findParticipantFromEventIdAndUser, arg.EventID, arg.UserID)
	var i Participant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Organizer,
		&i.Participates,
		&i.Accepted,
		&i.EventID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
