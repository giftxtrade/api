//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ParticipantUser = newParticipantUserTable("public", "participant_user", "")

type participantUserTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Name         postgres.ColumnString
	Email        postgres.ColumnString
	Address      postgres.ColumnString
	Organizer    postgres.ColumnBool
	Participates postgres.ColumnBool
	Accepted     postgres.ColumnBool
	EventID      postgres.ColumnInteger
	UserID       postgres.ColumnInteger
	CreatedAt    postgres.ColumnTimestampz
	UpdatedAt    postgres.ColumnTimestampz
	UserName     postgres.ColumnString
	UserEmail    postgres.ColumnString
	UserImageURL postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ParticipantUserTable struct {
	participantUserTable

	EXCLUDED participantUserTable
}

// AS creates new ParticipantUserTable with assigned alias
func (a ParticipantUserTable) AS(alias string) *ParticipantUserTable {
	return newParticipantUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ParticipantUserTable with assigned schema name
func (a ParticipantUserTable) FromSchema(schemaName string) *ParticipantUserTable {
	return newParticipantUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ParticipantUserTable with assigned table prefix
func (a ParticipantUserTable) WithPrefix(prefix string) *ParticipantUserTable {
	return newParticipantUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ParticipantUserTable with assigned table suffix
func (a ParticipantUserTable) WithSuffix(suffix string) *ParticipantUserTable {
	return newParticipantUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newParticipantUserTable(schemaName, tableName, alias string) *ParticipantUserTable {
	return &ParticipantUserTable{
		participantUserTable: newParticipantUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newParticipantUserTableImpl("", "excluded", ""),
	}
}

func newParticipantUserTableImpl(schemaName, tableName, alias string) participantUserTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		NameColumn         = postgres.StringColumn("name")
		EmailColumn        = postgres.StringColumn("email")
		AddressColumn      = postgres.StringColumn("address")
		OrganizerColumn    = postgres.BoolColumn("organizer")
		ParticipatesColumn = postgres.BoolColumn("participates")
		AcceptedColumn     = postgres.BoolColumn("accepted")
		EventIDColumn      = postgres.IntegerColumn("event_id")
		UserIDColumn       = postgres.IntegerColumn("user_id")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn    = postgres.TimestampzColumn("updated_at")
		UserNameColumn     = postgres.StringColumn("user_name")
		UserEmailColumn    = postgres.StringColumn("user_email")
		UserImageURLColumn = postgres.StringColumn("user_image_url")
		allColumns         = postgres.ColumnList{IDColumn, NameColumn, EmailColumn, AddressColumn, OrganizerColumn, ParticipatesColumn, AcceptedColumn, EventIDColumn, UserIDColumn, CreatedAtColumn, UpdatedAtColumn, UserNameColumn, UserEmailColumn, UserImageURLColumn}
		mutableColumns     = postgres.ColumnList{IDColumn, NameColumn, EmailColumn, AddressColumn, OrganizerColumn, ParticipatesColumn, AcceptedColumn, EventIDColumn, UserIDColumn, CreatedAtColumn, UpdatedAtColumn, UserNameColumn, UserEmailColumn, UserImageURLColumn}
	)

	return participantUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		Email:        EmailColumn,
		Address:      AddressColumn,
		Organizer:    OrganizerColumn,
		Participates: ParticipatesColumn,
		Accepted:     AcceptedColumn,
		EventID:      EventIDColumn,
		UserID:       UserIDColumn,
		CreatedAt:    CreatedAtColumn,
		UpdatedAt:    UpdatedAtColumn,
		UserName:     UserNameColumn,
		UserEmail:    UserEmailColumn,
		UserImageURL: UserImageURLColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
