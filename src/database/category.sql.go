// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: category.sql

package database

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO "category" (
    "name",
    "description",
    "category_url"
) VALUES(
    $1,
    $2,
    $3
)
RETURNING id, name, description, category_url, created_at, updated_at
`

type CreateCategoryParams struct {
	Name        string         `db:"name" json:"name"`
	Description sql.NullString `db:"description" json:"description"`
	CategoryUrl sql.NullString `db:"category_url" json:"categoryUrl"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.queryRow(ctx, q.createCategoryStmt, createCategory, arg.Name, arg.Description, arg.CategoryUrl)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findCategoryByName = `-- name: FindCategoryByName :one
SELECT id, name, description, category_url, created_at, updated_at FROM "category"
WHERE "name" = $1
`

func (q *Queries) FindCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.queryRow(ctx, q.findCategoryByNameStmt, findCategoryByName, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CategoryUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
