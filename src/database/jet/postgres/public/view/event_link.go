//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EventLink = newEventLinkTable("public", "event_link", "")

type eventLinkTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnInteger
	Name               postgres.ColumnString
	Description        postgres.ColumnString
	Budget             postgres.ColumnString
	InvitationMessage  postgres.ColumnString
	DrawAt             postgres.ColumnTimestampz
	CloseAt            postgres.ColumnTimestampz
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz
	LinkID             postgres.ColumnInteger
	LinkCode           postgres.ColumnString
	LinkExpirationDate postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EventLinkTable struct {
	eventLinkTable

	EXCLUDED eventLinkTable
}

// AS creates new EventLinkTable with assigned alias
func (a EventLinkTable) AS(alias string) *EventLinkTable {
	return newEventLinkTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EventLinkTable with assigned schema name
func (a EventLinkTable) FromSchema(schemaName string) *EventLinkTable {
	return newEventLinkTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EventLinkTable with assigned table prefix
func (a EventLinkTable) WithPrefix(prefix string) *EventLinkTable {
	return newEventLinkTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EventLinkTable with assigned table suffix
func (a EventLinkTable) WithSuffix(suffix string) *EventLinkTable {
	return newEventLinkTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEventLinkTable(schemaName, tableName, alias string) *EventLinkTable {
	return &EventLinkTable{
		eventLinkTable: newEventLinkTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newEventLinkTableImpl("", "excluded", ""),
	}
}

func newEventLinkTableImpl(schemaName, tableName, alias string) eventLinkTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		NameColumn               = postgres.StringColumn("name")
		DescriptionColumn        = postgres.StringColumn("description")
		BudgetColumn             = postgres.StringColumn("budget")
		InvitationMessageColumn  = postgres.StringColumn("invitation_message")
		DrawAtColumn             = postgres.TimestampzColumn("draw_at")
		CloseAtColumn            = postgres.TimestampzColumn("close_at")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		LinkIDColumn             = postgres.IntegerColumn("link_id")
		LinkCodeColumn           = postgres.StringColumn("link_code")
		LinkExpirationDateColumn = postgres.TimestampzColumn("link_expiration_date")
		allColumns               = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, BudgetColumn, InvitationMessageColumn, DrawAtColumn, CloseAtColumn, CreatedAtColumn, UpdatedAtColumn, LinkIDColumn, LinkCodeColumn, LinkExpirationDateColumn}
		mutableColumns           = postgres.ColumnList{IDColumn, NameColumn, DescriptionColumn, BudgetColumn, InvitationMessageColumn, DrawAtColumn, CloseAtColumn, CreatedAtColumn, UpdatedAtColumn, LinkIDColumn, LinkCodeColumn, LinkExpirationDateColumn}
	)

	return eventLinkTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Name:               NameColumn,
		Description:        DescriptionColumn,
		Budget:             BudgetColumn,
		InvitationMessage:  InvitationMessageColumn,
		DrawAt:             DrawAtColumn,
		CloseAt:            CloseAtColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,
		LinkID:             LinkIDColumn,
		LinkCode:           LinkCodeColumn,
		LinkExpirationDate: LinkExpirationDateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
