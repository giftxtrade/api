//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Wish = newWishTable("public", "wish", "")

type wishTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	UserID        postgres.ColumnInteger
	ParticipantID postgres.ColumnInteger
	ProductID     postgres.ColumnInteger
	EventID       postgres.ColumnInteger
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz
	Quantity      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WishTable struct {
	wishTable

	EXCLUDED wishTable
}

// AS creates new WishTable with assigned alias
func (a WishTable) AS(alias string) *WishTable {
	return newWishTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WishTable with assigned schema name
func (a WishTable) FromSchema(schemaName string) *WishTable {
	return newWishTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WishTable with assigned table prefix
func (a WishTable) WithPrefix(prefix string) *WishTable {
	return newWishTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WishTable with assigned table suffix
func (a WishTable) WithSuffix(suffix string) *WishTable {
	return newWishTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWishTable(schemaName, tableName, alias string) *WishTable {
	return &WishTable{
		wishTable: newWishTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newWishTableImpl("", "excluded", ""),
	}
}

func newWishTableImpl(schemaName, tableName, alias string) wishTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		UserIDColumn        = postgres.IntegerColumn("user_id")
		ParticipantIDColumn = postgres.IntegerColumn("participant_id")
		ProductIDColumn     = postgres.IntegerColumn("product_id")
		EventIDColumn       = postgres.IntegerColumn("event_id")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		QuantityColumn      = postgres.IntegerColumn("quantity")
		allColumns          = postgres.ColumnList{IDColumn, UserIDColumn, ParticipantIDColumn, ProductIDColumn, EventIDColumn, CreatedAtColumn, UpdatedAtColumn, QuantityColumn}
		mutableColumns      = postgres.ColumnList{UserIDColumn, ParticipantIDColumn, ProductIDColumn, EventIDColumn, CreatedAtColumn, UpdatedAtColumn, QuantityColumn}
	)

	return wishTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		UserID:        UserIDColumn,
		ParticipantID: ParticipantIDColumn,
		ProductID:     ProductIDColumn,
		EventID:       EventIDColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		Quantity:      QuantityColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
